unite(newfactor, catnames, catvalues, sep=".") %>%
mutate(is = 1) %>%
spread(newfactor, is, fill = 0)
bins[] <- lapply(bins, as.numeric)
bins$Dress_ID <- as.factor(bins$Dress_ID)
cnames <- colnames(bins)
bad.cnames <- cnames[grepl("-",cnames,fixed=TRUE)]
fixed.cnames <- sapply(bad.cnames,function(x){gsub("-",".",x,fixed=TRUE)})
cnames[cnames %in% fixed.cnames]
setnames(bins, old=bad.cnames, new=fixed.cnames)
bins.nn<-function(df,rep=1,hidden=c(1),threshold=0.1) {
set.seed(seed)
nn.obj<-neuralnet(Recommendation ~ Decoration.applique+ Decoration.beading+ Decoration.bow+ Decoration.button+ Decoration.cascading+ Decoration.crystal+ Decoration.draped+ Decoration.embroidary+ Decoration.feathers+ Decoration.flowers+ Decoration.hollowout+ Decoration.lace+ Decoration.NA+ Decoration.none+ Decoration.null+ Decoration.pearls+ Decoration.plain+ Decoration.pleat+ Decoration.pockets+ Decoration.rivet+ Decoration.ruched+ Decoration.ruffles+ Decoration.sashes+ Decoration.sequined+ Decoration.tassel+ Decoration.Tiered+ FabricType.batik+ FabricType.broadcloth+ FabricType.chiffon+ FabricType.Corduroy+ FabricType.dobby+ FabricType.flannael+ FabricType.flannel+ FabricType.jersey+ FabricType.knitted+ FabricType.knitting+ FabricType.lace+ FabricType.NA+ FabricType.null+ FabricType.organza+ FabricType.other+ FabricType.poplin+ FabricType.satin+ FabricType.sattin+ FabricType.shiffon+ FabricType.terry+ FabricType.tulle+ FabricType.wollen+ FabricType.woolen+ FabricType.worsted+ Material.acrylic+ Material.cashmere+ Material.chiffonfabric+ Material.cotton+ Material.knitting+ Material.lace+ Material.linen+ Material.lycra+ Material.microfiber+ Material.milksilk+ Material.mix+ Material.modal+ Material.model+ Material.NA+ Material.null+ Material.nylon+ Material.other+ Material.polyster+ Material.rayon+ Material.shiffon+ Material.silk+ Material.sill+ Material.spandex+ Material.viscos+ Material.wool+ NeckLine.backless+ NeckLine.boat.neck+ NeckLine.bowneck+ NeckLine.halter+ NeckLine.mandarin.collor+ NeckLine.NA+ NeckLine.NULL+ NeckLine.o.neck+ NeckLine.open+ NeckLine.peterpan.collor+ NeckLine.ruffled+ NeckLine.Scoop+ NeckLine.slash.neck+ NeckLine.sqare.collor+ NeckLine.sweetheart+ NeckLine.Sweetheart+ NeckLine.turndowncollor+ NeckLine.v.neck+ Pattern.Type.animal+ Pattern.Type.character+ Pattern.Type.dot+ Pattern.Type.floral+ Pattern.Type.geometric+ Pattern.Type.leapord+ Pattern.Type.leopard+ Pattern.Type.NA+ Pattern.Type.none+ Pattern.Type.null+ Pattern.Type.patchwork+ Pattern.Type.plaid+ Pattern.Type.print+ Pattern.Type.solid+ Pattern.Type.splice+ Pattern.Type.striped+ Price.Average+ Price.high+ Price.High+ Price.low+ Price.Low+ Price.Medium+ Price.NA+ Price.very.high+ Season.Automn+ Season.Autumn+ Season.NA+ Season.spring+ Season.Spring+ Season.summer+ Season.Summer+ Season.winter+ Season.Winter+ Size.free+ Size.L+ Size.M+ Size.s+ Size.S+ Size.small+ Size.XL+ SleeveLength.butterfly+ SleeveLength.cap.sleeves+ SleeveLength.capsleeves+ SleeveLength.full+ SleeveLength.half+ SleeveLength.halfsleeve+ SleeveLength.NULL+ SleeveLength.Petal+ SleeveLength.short+ SleeveLength.sleeevless+ SleeveLength.sleeveless+ SleeveLength.sleevless+ SleeveLength.sleveless+ SleeveLength.threequarter+ SleeveLength.threequater+ SleeveLength.thressqatar+ SleeveLength.turndowncollor+ SleeveLength.urndowncollor+ Style.bohemian+ Style.Brief+ Style.Casual+ Style.cute+ Style.fashion+ Style.Flare+ Style.Novelty+ Style.OL+ Style.party+ Style.sexy+ Style.Sexy+ Style.vintage+ Style.work+ waiseline.dropped+ waiseline.empire+ waiseline.NA+ waiseline.natural+ waiseline.null+ waiseline.princess,
data=df,
hidden=hidden,
lifesign="full",
lifesign.step=2000,
threshold=threshold,
rep=rep)
return(nn.obj)}
qualify(round(res1$net.result),bins$Recommendation)
n1<-bins.nn(bins,rep=1,hidden=c(5),threshold=0.02)
dim(bins)
dim(df)
trainers <- bins[train_set, ]
testers <- bins[-train_set, ]
n5<-bins.nn(trainers,rep=1,hidden=c(5),threshold=0.02)
res5<-neuralnet::compute(n5,testers[,5:174])
qualify(round(res5$net.result),testers$Recommendation)
plot(n5)
# include libraries
library(digest)
library(dplyr)
library(tidyr)
library(nnet)
library(neuralnet)
library(data.table)
library(xlsx)
# include working directory and data
setwd("./")
data <- read.xlsx("Data.xlsx", 1) # 1 is tab number
summary(data)
# check whether Dress_ID is unique
length(unique(data$Dress_ID))
length(data$Dress_ID)
# we found that there are 50 items that have same Dress_ID but different styles, different attributes, so Dress_ID is not unique
repeats <- table(data$Dress_ID)
dupes <- data[data$Dress_ID %in% names(repeats[repeats > 1]), ] %>% arrange(Dress_ID)
# append unique row number for each item
data$rnumber <- 1:nrow(data)
# apply factor
df <- as.data.frame(
lapply(dplyr::select(data, -Dress_ID, -rnumber), as.factor)
)
df$Rating <- as.numeric(df$Rating)
# train neural network
neuron_size <- 5
df1 <- df
seed <- 3
set.seed(seed)
nn <- nnet(Recommendation ~ ., df1, size=neuron_size)
guess <- predict(nn, df1, type="class")
table(df1$Recommendation, guess)
nn.placeholder <- nn
if (exists("nnet")) rm(nnet)
nnet <- function(a, b, size=1) {
print("Console: skipped following nnet calls")
nn.placeholder
}
qualify <- function(real, guess) {
check <- table(real, guess)
good.ones <- check[1, 1] + check[2, 2]
bad.ones <- check[1, 2] + check[2, 1]
paste0(as.character(round(100*good.ones / (good.ones + bad.ones))), '%')
}
quality <- quality(df1$Recommendation, guess)
print(quality)
# separate training and test sets
number_of_observations <- dim(df)[1]
split_ratio <- 0.8
set.seed(seed)
train_set <- sample.int(number_of_observations, round(split_ratio*number_of_observations))
# split train_set into 2
neuron_size <- 5
df1 <- df
trainers <- df1[train_set,]
testers <- df1[-train_set,]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size)
# predict test set with nn function
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
# record for later comparison
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
nnets
nnets.all <- nnets
# flip rating value
neuron_size <- 5
df1 <- dplyr::select(df, -Rating)
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size)
guess <- prediction(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="No", Quality=quality)
nnets
nnets.all <- rbind(nnets.all, nnets)
# increase neuron size, added MaxNWTs to override neural net default neuron number
neuron_size <- 30
df1 <- df
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) with Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
# train without rating
neuron_size <- 30
df1 <- dplyr::select(df, -Rating)
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) without Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
# count unique number of unique values in each column, then sum it up
(levels.number<-sum(
sapply(
dplyr::select(df,-Rating,-Recommendation),
function(x)
length(unique(x)))))
# assign 2/3 number of neurons against number of input
(neuron_size <- round((levels.number+2)*2/3))
# refresh with new neuron size
df1 <- df
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) with Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
print(data.frame(nnets.all), row.names=FALSE)
data[] <- lapply(data, as.character)
bins <- data %>%
gather(catnames, catvalues, -Dress_ID, -Rating,-Recommendation, -rnumber) %>%
unite(newfactor, catnames, catvalues, sep=".") %>%
mutate(is = 1) %>%
spread(newfactor, is, fill = 0)
bins[] <- lapply(bins, as.numeric)
bins$Dress_ID <- as.factor(bins$Dress_ID)
cnames <- colnames(bins)
bad.cnames <- cnames[grepl("-",cnames,fixed=TRUE)]
fixed.cnames <- sapply(bad.cnames,function(x){gsub("-",".",x,fixed=TRUE)})
cnames[cnames %in% fixed.cnames]
setnames(bins, old=bad.cnames, new=fixed.cnames)
bins.nn<-function(df,rep=1,hidden=c(1),threshold=0.1) {
set.seed(seed)
nn.obj<-neuralnet(Recommendation ~ Decoration.applique+ Decoration.beading+ Decoration.bow+ Decoration.button+ Decoration.cascading+ Decoration.crystal+ Decoration.draped+ Decoration.embroidary+ Decoration.feathers+ Decoration.flowers+ Decoration.hollowout+ Decoration.lace+ Decoration.NA+ Decoration.none+ Decoration.null+ Decoration.pearls+ Decoration.plain+ Decoration.pleat+ Decoration.pockets+ Decoration.rivet+ Decoration.ruched+ Decoration.ruffles+ Decoration.sashes+ Decoration.sequined+ Decoration.tassel+ Decoration.Tiered+ FabricType.batik+ FabricType.broadcloth+ FabricType.chiffon+ FabricType.Corduroy+ FabricType.dobby+ FabricType.flannael+ FabricType.flannel+ FabricType.jersey+ FabricType.knitted+ FabricType.knitting+ FabricType.lace+ FabricType.NA+ FabricType.null+ FabricType.organza+ FabricType.other+ FabricType.poplin+ FabricType.satin+ FabricType.sattin+ FabricType.shiffon+ FabricType.terry+ FabricType.tulle+ FabricType.wollen+ FabricType.woolen+ FabricType.worsted+ Material.acrylic+ Material.cashmere+ Material.chiffonfabric+ Material.cotton+ Material.knitting+ Material.lace+ Material.linen+ Material.lycra+ Material.microfiber+ Material.milksilk+ Material.mix+ Material.modal+ Material.model+ Material.NA+ Material.null+ Material.nylon+ Material.other+ Material.polyster+ Material.rayon+ Material.shiffon+ Material.silk+ Material.sill+ Material.spandex+ Material.viscos+ Material.wool+ NeckLine.backless+ NeckLine.boat.neck+ NeckLine.bowneck+ NeckLine.halter+ NeckLine.mandarin.collor+ NeckLine.NA+ NeckLine.NULL+ NeckLine.o.neck+ NeckLine.open+ NeckLine.peterpan.collor+ NeckLine.ruffled+ NeckLine.Scoop+ NeckLine.slash.neck+ NeckLine.sqare.collor+ NeckLine.sweetheart+ NeckLine.Sweetheart+ NeckLine.turndowncollor+ NeckLine.v.neck+ Pattern.Type.animal+ Pattern.Type.character+ Pattern.Type.dot+ Pattern.Type.floral+ Pattern.Type.geometric+ Pattern.Type.leapord+ Pattern.Type.leopard+ Pattern.Type.NA+ Pattern.Type.none+ Pattern.Type.null+ Pattern.Type.patchwork+ Pattern.Type.plaid+ Pattern.Type.print+ Pattern.Type.solid+ Pattern.Type.splice+ Pattern.Type.striped+ Price.Average+ Price.high+ Price.High+ Price.low+ Price.Low+ Price.Medium+ Price.NA+ Price.very.high+ Season.Automn+ Season.Autumn+ Season.NA+ Season.spring+ Season.Spring+ Season.summer+ Season.Summer+ Season.winter+ Season.Winter+ Size.free+ Size.L+ Size.M+ Size.s+ Size.S+ Size.small+ Size.XL+ SleeveLength.butterfly+ SleeveLength.cap.sleeves+ SleeveLength.capsleeves+ SleeveLength.full+ SleeveLength.half+ SleeveLength.halfsleeve+ SleeveLength.NULL+ SleeveLength.Petal+ SleeveLength.short+ SleeveLength.sleeevless+ SleeveLength.sleeveless+ SleeveLength.sleevless+ SleeveLength.sleveless+ SleeveLength.threequarter+ SleeveLength.threequater+ SleeveLength.thressqatar+ SleeveLength.turndowncollor+ SleeveLength.urndowncollor+ Style.bohemian+ Style.Brief+ Style.Casual+ Style.cute+ Style.fashion+ Style.Flare+ Style.Novelty+ Style.OL+ Style.party+ Style.sexy+ Style.Sexy+ Style.vintage+ Style.work+ waiseline.dropped+ waiseline.empire+ waiseline.NA+ waiseline.natural+ waiseline.null+ waiseline.princess,
data=df,
hidden=hidden,
lifesign="full",
lifesign.step=2000,
threshold=threshold,
rep=rep)
return(nn.obj)}
qualify(round(res1$net.result),bins$Recommendation)
n1<-bins.nn(bins,rep=1,hidden=c(5),threshold=0.02)
dim(bins)
dim(df)
trainers <- bins[train_set, ]
testers <- bins[-train_set, ]
n5<-bins.nn(trainers,rep=1,hidden=c(5),threshold=0.02)
res5<-neuralnet::compute(n5,testers[,5:174])
qualify(round(res5$net.result),testers$Recommendation)
n2<-bins.nn(trainers,rep=1,hidden=c(1),threshold=0.02)
res2<-neuralnet::compute(n2,testers[,5:174])
qualify(round(res2$net.result),testers$Recommendation)
# include libraries
library(digest)
library(dplyr)
library(tidyr)
library(nnet)
library(neuralnet)
library(data.table)
library(xlsx)
# include working directory and data
setwd("./")
data <- read.xlsx("Data.xlsx", 1) # 1 is tab number
summary(data)
# check whether Dress_ID is unique
length(unique(data$Dress_ID))
length(data$Dress_ID)
# we found that there are 50 items that have same Dress_ID but different styles, different attributes, so Dress_ID is not unique
repeats <- table(data$Dress_ID)
dupes <- data[data$Dress_ID %in% names(repeats[repeats > 1]), ] %>% arrange(Dress_ID)
# append unique row number for each item
data$rnumber <- 1:nrow(data)
# apply factor
df <- as.data.frame(
lapply(dplyr::select(data, -Dress_ID, -rnumber), as.factor)
)
df$Rating <- as.numeric(df$Rating)
# train neural network
neuron_size <- 5
df1 <- df
seed <- 3
set.seed(seed)
nn <- nnet(Recommendation ~ ., df1, size=neuron_size)
guess <- predict(nn, df1, type="class")
table(df1$Recommendation, guess)
nn.placeholder <- nn
if (exists("nnet")) rm(nnet)
nnet <- function(a, b, size=1) {
print("Console: skipped following nnet calls")
nn.placeholder
}
qualify <- function(real, guess) {
check <- table(real, guess)
good.ones <- check[1, 1] + check[2, 2]
bad.ones <- check[1, 2] + check[2, 1]
paste0(as.character(round(100*good.ones / (good.ones + bad.ones))), '%')
}
quality <- quality(df1$Recommendation, guess)
print(quality)
# separate training and test sets
number_of_observations <- dim(df)[1]
split_ratio <- 0.8
set.seed(seed)
train_set <- sample.int(number_of_observations, round(split_ratio*number_of_observations))
# split train_set into 2
neuron_size <- 5
df1 <- df
trainers <- df1[train_set,]
testers <- df1[-train_set,]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size)
# predict test set with nn function
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
# record for later comparison
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
nnets
nnets.all <- nnets
# flip rating value
neuron_size <- 5
df1 <- dplyr::select(df, -Rating)
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size)
guess <- prediction(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="No", Quality=quality)
nnets
nnets.all <- rbind(nnets.all, nnets)
# increase neuron size, added MaxNWTs to override neural net default neuron number
neuron_size <- 30
df1 <- df
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) with Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
# train without rating
neuron_size <- 30
df1 <- dplyr::select(df, -Rating)
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) without Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
# count unique number of unique values in each column, then sum it up
(levels.number<-sum(
sapply(
dplyr::select(df,-Rating,-Recommendation),
function(x)
length(unique(x)))))
# assign 2/3 number of neurons against number of input
(neuron_size <- round((levels.number+2)*2/3))
# refresh with new neuron size
df1 <- df
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) with Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
print(data.frame(nnets.all), row.names=FALSE)
data[] <- lapply(data, as.character)
bins <- data %>%
gather(catnames, catvalues, -Dress_ID, -Rating,-Recommendation, -rnumber) %>%
unite(newfactor, catnames, catvalues, sep=".") %>%
mutate(is = 1) %>%
spread(newfactor, is, fill = 0)
bins[] <- lapply(bins, as.numeric)
bins$Dress_ID <- as.factor(bins$Dress_ID)
cnames <- colnames(bins)
bad.cnames <- cnames[grepl("-",cnames,fixed=TRUE)]
fixed.cnames <- sapply(bad.cnames,function(x){gsub("-",".",x,fixed=TRUE)})
cnames[cnames %in% fixed.cnames]
setnames(bins, old=bad.cnames, new=fixed.cnames)
bins.nn<-function(df,rep=1,hidden=c(1),threshold=0.1) {
set.seed(seed)
nn.obj<-neuralnet(Recommendation ~ Decoration.applique+ Decoration.beading+ Decoration.bow+ Decoration.button+ Decoration.cascading+ Decoration.crystal+ Decoration.draped+ Decoration.embroidary+ Decoration.feathers+ Decoration.flowers+ Decoration.hollowout+ Decoration.lace+ Decoration.NA+ Decoration.none+ Decoration.null+ Decoration.pearls+ Decoration.plain+ Decoration.pleat+ Decoration.pockets+ Decoration.rivet+ Decoration.ruched+ Decoration.ruffles+ Decoration.sashes+ Decoration.sequined+ Decoration.tassel+ Decoration.Tiered+ FabricType.batik+ FabricType.broadcloth+ FabricType.chiffon+ FabricType.Corduroy+ FabricType.dobby+ FabricType.flannael+ FabricType.flannel+ FabricType.jersey+ FabricType.knitted+ FabricType.knitting+ FabricType.lace+ FabricType.NA+ FabricType.null+ FabricType.organza+ FabricType.other+ FabricType.poplin+ FabricType.satin+ FabricType.sattin+ FabricType.shiffon+ FabricType.terry+ FabricType.tulle+ FabricType.wollen+ FabricType.woolen+ FabricType.worsted+ Material.acrylic+ Material.cashmere+ Material.chiffonfabric+ Material.cotton+ Material.knitting+ Material.lace+ Material.linen+ Material.lycra+ Material.microfiber+ Material.milksilk+ Material.mix+ Material.modal+ Material.model+ Material.NA+ Material.null+ Material.nylon+ Material.other+ Material.polyster+ Material.rayon+ Material.shiffon+ Material.silk+ Material.sill+ Material.spandex+ Material.viscos+ Material.wool+ NeckLine.backless+ NeckLine.boat.neck+ NeckLine.bowneck+ NeckLine.halter+ NeckLine.mandarin.collor+ NeckLine.NA+ NeckLine.NULL+ NeckLine.o.neck+ NeckLine.open+ NeckLine.peterpan.collor+ NeckLine.ruffled+ NeckLine.Scoop+ NeckLine.slash.neck+ NeckLine.sqare.collor+ NeckLine.sweetheart+ NeckLine.Sweetheart+ NeckLine.turndowncollor+ NeckLine.v.neck+ Pattern.Type.animal+ Pattern.Type.character+ Pattern.Type.dot+ Pattern.Type.floral+ Pattern.Type.geometric+ Pattern.Type.leapord+ Pattern.Type.leopard+ Pattern.Type.NA+ Pattern.Type.none+ Pattern.Type.null+ Pattern.Type.patchwork+ Pattern.Type.plaid+ Pattern.Type.print+ Pattern.Type.solid+ Pattern.Type.splice+ Pattern.Type.striped+ Price.Average+ Price.high+ Price.High+ Price.low+ Price.Low+ Price.Medium+ Price.NA+ Price.very.high+ Season.Automn+ Season.Autumn+ Season.NA+ Season.spring+ Season.Spring+ Season.summer+ Season.Summer+ Season.winter+ Season.Winter+ Size.free+ Size.L+ Size.M+ Size.s+ Size.S+ Size.small+ Size.XL+ SleeveLength.butterfly+ SleeveLength.cap.sleeves+ SleeveLength.capsleeves+ SleeveLength.full+ SleeveLength.half+ SleeveLength.halfsleeve+ SleeveLength.NULL+ SleeveLength.Petal+ SleeveLength.short+ SleeveLength.sleeevless+ SleeveLength.sleeveless+ SleeveLength.sleevless+ SleeveLength.sleveless+ SleeveLength.threequarter+ SleeveLength.threequater+ SleeveLength.thressqatar+ SleeveLength.turndowncollor+ SleeveLength.urndowncollor+ Style.bohemian+ Style.Brief+ Style.Casual+ Style.cute+ Style.fashion+ Style.Flare+ Style.Novelty+ Style.OL+ Style.party+ Style.sexy+ Style.Sexy+ Style.vintage+ Style.work+ waiseline.dropped+ waiseline.empire+ waiseline.NA+ waiseline.natural+ waiseline.null+ waiseline.princess,
data=df,
hidden=hidden,
lifesign="full",
lifesign.step=2000,
threshold=threshold,
rep=rep)
return(nn.obj)}
qualify(round(res1$net.result),bins$Recommendation)
n1<-bins.nn(bins,rep=1,hidden=c(5),threshold=0.02)
dim(bins)
dim(df)
trainers <- bins[train_set, ]
testers <- bins[-train_set, ]
n5<-bins.nn(trainers,rep=1,hidden=c(5),threshold=0.02)
res5<-neuralnet::compute(n5,testers[,5:174])
qualify(round(res5$net.result),testers$Recommendation)
n2<-bins.nn(trainers,rep=1,hidden=c(10),threshold=0.02)
res2<-neuralnet::compute(n2,testers[,5:174])
qualify(round(res2$net.result),testers$Recommendation)
plot(n2)
# include libraries
library(digest)
library(dplyr)
library(tidyr)
library(nnet)
library(neuralnet)
library(data.table)
library(xlsx)
# include working directory and data
setwd("./")
data <- read.xlsx("Data.xlsx", 1) # 1 is tab number
summary(data)
# check whether Dress_ID is unique
length(unique(data$Dress_ID))
length(data$Dress_ID)
# we found that there are 50 items that have same Dress_ID but different styles, different attributes, so Dress_ID is not unique
repeats <- table(data$Dress_ID)
dupes <- data[data$Dress_ID %in% names(repeats[repeats > 1]), ] %>% arrange(Dress_ID)
# append unique row number for each item
data$rnumber <- 1:nrow(data)
# apply factor
df <- as.data.frame(
lapply(dplyr::select(data, -Dress_ID, -rnumber), as.factor)
)
df$Rating <- as.numeric(df$Rating)
# train neural network
neuron_size <- 5
df1 <- df
seed <- 3
set.seed(seed)
nn <- nnet(Recommendation ~ ., df1, size=neuron_size)
guess <- predict(nn, df1, type="class")
table(df1$Recommendation, guess)
nn.placeholder <- nn
if (exists("nnet")) rm(nnet)
nnet <- function(a, b, size=1) {
print("Console: skipped following nnet calls")
nn.placeholder
}
qualify <- function(real, guess) {
check <- table(real, guess)
good.ones <- check[1, 1] + check[2, 2]
bad.ones <- check[1, 2] + check[2, 1]
paste0(as.character(round(100*good.ones / (good.ones + bad.ones))), '%')
}
quality <- quality(df1$Recommendation, guess)
print(quality)
# separate training and test sets
number_of_observations <- dim(df)[1]
split_ratio <- 0.8
set.seed(seed)
train_set <- sample.int(number_of_observations, round(split_ratio*number_of_observations))
# split train_set into 2
neuron_size <- 5
df1 <- df
trainers <- df1[train_set,]
testers <- df1[-train_set,]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size)
# predict test set with nn function
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
# record for later comparison
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
nnets
nnets.all <- nnets
# flip rating value
neuron_size <- 5
df1 <- dplyr::select(df, -Rating)
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size)
guess <- prediction(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="No", Quality=quality)
nnets
nnets.all <- rbind(nnets.all, nnets)
# increase neuron size, added MaxNWTs to override neural net default neuron number
neuron_size <- 30
df1 <- df
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) with Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
# train without rating
neuron_size <- 30
df1 <- dplyr::select(df, -Rating)
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) without Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
# count unique number of unique values in each column, then sum it up
(levels.number<-sum(
sapply(
dplyr::select(df,-Rating,-Recommendation),
function(x)
length(unique(x)))))
# assign 2/3 number of neurons against number of input
(neuron_size <- round((levels.number+2)*2/3))
# refresh with new neuron size
df1 <- df
trainers <- df1[train_set, ]
testers <- df1[-train_set, ]
set.seed(seed)
nn <- nnet(Recommendation ~ ., trainers, size=neuron_size, MaxNWts=10000)
guess <- predict(nn, testers, type="class")
quality <- qualify(testers$Recommendation, guess)
nnets <- c(Neurons=neuron_size, Rating="Yes", Quality=quality)
print("Net (30 neurons) with Rating")
nnets
nnets.all <- rbind(nnets.all, nnets)
print(data.frame(nnets.all), row.names=FALSE)
data[] <- lapply(data, as.character)
bins <- data %>%
gather(catnames, catvalues, -Dress_ID, -Rating,-Recommendation, -rnumber) %>%
unite(newfactor, catnames, catvalues, sep=".") %>%
mutate(is = 1) %>%
spread(newfactor, is, fill = 0)
bins[] <- lapply(bins, as.numeric)
bins$Dress_ID <- as.factor(bins$Dress_ID)
cnames <- colnames(bins)
bad.cnames <- cnames[grepl("-",cnames,fixed=TRUE)]
fixed.cnames <- sapply(bad.cnames,function(x){gsub("-",".",x,fixed=TRUE)})
cnames[cnames %in% fixed.cnames]
setnames(bins, old=bad.cnames, new=fixed.cnames)
bins.nn<-function(df,rep=1,hidden=c(1),threshold=0.1) {
set.seed(seed)
nn.obj<-neuralnet(Recommendation ~ Decoration.applique+ Decoration.beading+ Decoration.bow+ Decoration.button+ Decoration.cascading+ Decoration.crystal+ Decoration.draped+ Decoration.embroidary+ Decoration.feathers+ Decoration.flowers+ Decoration.hollowout+ Decoration.lace+ Decoration.NA+ Decoration.none+ Decoration.null+ Decoration.pearls+ Decoration.plain+ Decoration.pleat+ Decoration.pockets+ Decoration.rivet+ Decoration.ruched+ Decoration.ruffles+ Decoration.sashes+ Decoration.sequined+ Decoration.tassel+ Decoration.Tiered+ FabricType.batik+ FabricType.broadcloth+ FabricType.chiffon+ FabricType.Corduroy+ FabricType.dobby+ FabricType.flannael+ FabricType.flannel+ FabricType.jersey+ FabricType.knitted+ FabricType.knitting+ FabricType.lace+ FabricType.NA+ FabricType.null+ FabricType.organza+ FabricType.other+ FabricType.poplin+ FabricType.satin+ FabricType.sattin+ FabricType.shiffon+ FabricType.terry+ FabricType.tulle+ FabricType.wollen+ FabricType.woolen+ FabricType.worsted+ Material.acrylic+ Material.cashmere+ Material.chiffonfabric+ Material.cotton+ Material.knitting+ Material.lace+ Material.linen+ Material.lycra+ Material.microfiber+ Material.milksilk+ Material.mix+ Material.modal+ Material.model+ Material.NA+ Material.null+ Material.nylon+ Material.other+ Material.polyster+ Material.rayon+ Material.shiffon+ Material.silk+ Material.sill+ Material.spandex+ Material.viscos+ Material.wool+ NeckLine.backless+ NeckLine.boat.neck+ NeckLine.bowneck+ NeckLine.halter+ NeckLine.mandarin.collor+ NeckLine.NA+ NeckLine.NULL+ NeckLine.o.neck+ NeckLine.open+ NeckLine.peterpan.collor+ NeckLine.ruffled+ NeckLine.Scoop+ NeckLine.slash.neck+ NeckLine.sqare.collor+ NeckLine.sweetheart+ NeckLine.Sweetheart+ NeckLine.turndowncollor+ NeckLine.v.neck+ Pattern.Type.animal+ Pattern.Type.character+ Pattern.Type.dot+ Pattern.Type.floral+ Pattern.Type.geometric+ Pattern.Type.leapord+ Pattern.Type.leopard+ Pattern.Type.NA+ Pattern.Type.none+ Pattern.Type.null+ Pattern.Type.patchwork+ Pattern.Type.plaid+ Pattern.Type.print+ Pattern.Type.solid+ Pattern.Type.splice+ Pattern.Type.striped+ Price.Average+ Price.high+ Price.High+ Price.low+ Price.Low+ Price.Medium+ Price.NA+ Price.very.high+ Season.Automn+ Season.Autumn+ Season.NA+ Season.spring+ Season.Spring+ Season.summer+ Season.Summer+ Season.winter+ Season.Winter+ Size.free+ Size.L+ Size.M+ Size.s+ Size.S+ Size.small+ Size.XL+ SleeveLength.butterfly+ SleeveLength.cap.sleeves+ SleeveLength.capsleeves+ SleeveLength.full+ SleeveLength.half+ SleeveLength.halfsleeve+ SleeveLength.NULL+ SleeveLength.Petal+ SleeveLength.short+ SleeveLength.sleeevless+ SleeveLength.sleeveless+ SleeveLength.sleevless+ SleeveLength.sleveless+ SleeveLength.threequarter+ SleeveLength.threequater+ SleeveLength.thressqatar+ SleeveLength.turndowncollor+ SleeveLength.urndowncollor+ Style.bohemian+ Style.Brief+ Style.Casual+ Style.cute+ Style.fashion+ Style.Flare+ Style.Novelty+ Style.OL+ Style.party+ Style.sexy+ Style.Sexy+ Style.vintage+ Style.work+ waiseline.dropped+ waiseline.empire+ waiseline.NA+ waiseline.natural+ waiseline.null+ waiseline.princess,
data=df,
hidden=hidden,
lifesign="full",
lifesign.step=2000,
threshold=threshold,
rep=rep)
return(nn.obj)}
qualify(round(res1$net.result),bins$Recommendation)
n1<-bins.nn(bins,rep=1,hidden=c(5),threshold=0.02)
dim(bins)
dim(df)
trainers <- bins[train_set, ]
testers <- bins[-train_set, ]
n5<-bins.nn(trainers,rep=1,hidden=c(5),threshold=0.02)
res5<-neuralnet::compute(n5,testers[,5:174])
qualify(round(res5$net.result),testers$Recommendation)
n2<-bins.nn(trainers,rep=1,hidden=c(80, 25, 10),threshold=0.02)
res2<-neuralnet::compute(n2,testers[,5:174])
qualify(round(res2$net.result),testers$Recommendation)
plot(n2)
